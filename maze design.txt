#include <graphics.h>
#include <conio.h>
#include <stdio.h>
#include<time.h>
#include<windows.h>
#pragma comment(lib,"Winmm.lib")//引用Windows Multimedias API
#define STACK_INIT_SIZE 100
#define STACKINCREMENT  100
#define OK              1
#define ERROR           0
#define OVERFLOW        -2
#define TRUE            1
#define FALSE           0
typedef struct{
	int p;
	int x;
	int y;
	bool visit;
}square;
typedef struct{//////////////////////////////////////定义移动的小方块
	int p1;
	int x1;
	int y1;
}move;
typedef struct{
	int *base;
	int *top;
	int stacksize;
}SqStack;
void menu();
void edit()
{
	char s[10];
	InputBox(s, 10, "请输入将路变墙的行");
	// 将用户输入转换为数字
	int c1;
	sscanf(s, "%d", &c1);
	InputBox(s, 10, "请输入将路变墙的列");
	int d1;
	sscanf(s, "%d", &d1);
	char s1[10];
	InputBox(s1, 10, "请输入将墙变路的行");
	// 将用户输入转换为数字
	int c2;
	sscanf(s1, "%d", &c2);
	InputBox(s1, 10, "请输入将墙变路的列");
	int d2;
	sscanf(s1, "%d", &d2);
/////////////////////////////////////////////////////////////////////////
	int t1,t,k,k1,key,d,j,i,t2,k2;
	move m;
	square a[50][50];
	initgraph(1024,640);
	setcolor(LIGHTCYAN);
	line(751,0,751,640);
	line(750,0,750,640);
	line(749,0,749,640);
	int b[50][50];////////////////////////////////////////////判断墙和路的值（1或0）
	for(i=60;i<=510;i+=30)
		line(60,i,510,i);
	for(j=60;j<=510;j+=30)
		line(j,60,j,510); 
	for(t=0,k=60;t<=14,k<=510;t++,k+=30)/////////////////将每一个方块的左上角横纵坐标值赋值给数组 
	{
		for(t1=0,k1=60;t1<=14,k1<=510;t1++,k1+=30)
		{
			    a[t][t1].x=k1;
			    a[t][t1].y=k;
		}
	}	
			for(t=0;t<=14;t++)//////////////////////////////////////////////////////////设置墙四周
			{
				for(t1=0;t1<=14;t1++)
				{
						setfillcolor(BLUE); 
						bar(a[0][t1].x+1,a[0][t1].y+1,a[0][t1].x+29,a[0][t1].y+29);
						bar(a[t][0].x+1,a[t][0].y+1,a[t][0].x+29,a[t][0].y+29);
						bar(a[14][t1].x+1,a[14][t1].y+1,a[14][t1].x+29,a[14][t1].y+29);
						bar(a[t][14].x+1,a[t][14].y+1,a[t][14].x+29,a[t][14].y+29);
				}
			}

			for( t2=0;t2<=14;t2++)
			{
				for( k2=0;k2<=14;k2++)
				{
				b[t2][k2]=1;
				b[0][k2]=9;
				b[14][k2]=9;
				b[t2][0]=9;
				b[t2][14]=9;
				}
			}
			for(t1=7;t1<=10;t1+=3)////////////////////////////////////////////////////设置墙
			{
				for(t=1;t<=3;t++)
				{
					setfillcolor(BLUE); 
					bar(a[t][t1].x+1,a[t][t1].y+1,a[t][t1].x+29,a[t][t1].y+29);

				}
			}
			for(t1=7;t1<=10;t1+=3)
			{
				for(t=1;t<=3;t++)
				{
					b[t][t1]=0;
				}
			}
				for(t=7;t<=10;t+=3)
			{
				for(t1=2;t1<=5;t1++)
				{
					setfillcolor(BLUE); 
					bar(a[t][t1].x+1,a[t][t1].y+1,a[t][t1].x+29,a[t][t1].y+29);
					b[t][t1]=0;
				}
			}
			for(t1=5;t1<=6;t1++)
			{
			setfillcolor(BLUE);
			bar(a[t1][2].x+1,a[t1][2].y+1,a[t1][2].x+29,a[t1][2].y+29);
			b[t1][2]=0;
			}
			setfillcolor(BLUE);
			bar(a[9][5].x+1,a[9][5].y+1,a[9][5].x+29,a[9][5].y+29);
			b[9][5]=0;
			for(t=12;t<=13;t++)
			{
				for(t1=1;t1<=2;t1++)
				{
				setfillcolor(BLUE); 
				bar(a[t][t1].x+1,a[t][t1].y+1,a[t][t1].x+29,a[t][t1].y+29);
				b[t][t1]=0;
				}
			}
			setfillcolor(BLUE); 
			bar(a[4][12].x+1,a[4][12].y+1,a[4][12].x+29,a[4][12].y+29);
			b[4][12]=0;
			for(t1=8;t1<=12;t1++)
			{
				setfillcolor(BLUE); 
				bar(a[5][t1].x+1,a[5][t1].y+1,a[5][t1].x+29,a[5][t1].y+29);
				b[5][t1]=0;
			}
			setfillcolor(BLUE); 
			bar(a[7][7].x+1,a[7][7].y+1,a[7][7].x+29,a[7][7].y+29);
			b[7][7]=0;
			for(t1=7;t1<=8;t1++)
			{
				setfillcolor(BLUE); 
				bar(a[8][t1].x+1,a[8][t1].y+1,a[8][t1].x+29,a[8][t1].y+29);
				b[8][t1]=0;
			}
			for(t1=6;t1<=10;t1++)
			{
				setfillcolor(BLUE); 
				bar(a[11][t1].x+1,a[11][t1].y+1,a[11][t1].x+29,a[11][t1].y+29);
				b[11][t1]=0;
			}
			for(t1=10;t1<=11;t1++)
			{
				setfillcolor(BLUE); 
				bar(a[12][t1].x+1,a[12][t1].y+1,a[12][t1].x+29,a[12][t1].y+29);
				b[12][t1]=0;
			}
				setfillcolor(BLUE); 
				bar(a[13][t1].x+1,a[13][t1].y+1,a[13][t1].x+29,a[13][t1].y+29);
				b[13][t1]=0;
			for(t=6;t<=9;t++)
			{
				setfillcolor(BLUE); 
				bar(a[t][11].x+1,a[t][11].y+1,a[t][11].x+29,a[t][11].y+29);
				b[t][11]=0;
			}
			for(t=9;t<=10;t++)
			{
				setfillcolor(BLUE); 
				bar(a[t][12].x+1,a[t][12].y+1,a[t][12].x+29,a[t][12].y+29);
				b[t][12]=0;
			}
			for(t=4;t<=5;t++)
			{
				setfillcolor(BLUE); 
				bar(a[t][5].x+1,a[t][5].y+1,a[t][5].x+29,a[t][5].y+29);
				b[t][5]=0;
				bar(a[t][3].x+1,a[t][3].y+1,a[t][3].x+29,a[t][3].y+29);
				b[t][3]=0;
			}
				for(t=2;t<=5;t++)
			{
				setfillcolor(BLUE);
				bar(a[t][3].x+1,a[t][3].y+1,a[t][3].x+29,a[t][3].y+29);
				b[t][3]=0;
			}
			for(t=11;t<=12;t++)
			{
				setfillcolor(BLUE); 
				bar(a[t][5].x+1,a[t][5].y+1,a[t][5].x+29,a[t][5].y+29);
				b[t][5]=0;
			}
			for(t1=12;t1<=13;t1++)
			{
				setfillcolor(BLUE); 
				bar(a[2][t1].x+1,a[2][t1].y+1,a[2][t1].x+29,a[2][t1].y+29);
				b[2][t1]=0;
			}
			for(t1=1;t1<=2;t1++)
			{
				setfillcolor(BLUE); 
				bar(a[2][t1].x+1,a[2][t1].y+1,a[2][t1].x+29,a[2][t1].y+29);
				b[2][t1]=0;
			}
				setfillcolor(BLUE); 
				bar(a[8][5].x+1,a[8][5].y+1,a[8][5].x+29,a[8][5].y+29);
				b[8][5]=0;
				setfillcolor(BLUE); 
				bar(a[13][11].x+1,a[13][11].y+1,a[13][11].x+29,a[13][11].y+29);
				b[13][11]=0;
				setfillcolor(BLUE); 
				bar(a[10][1].x+1,a[10][1].y+1,a[10][1].x+29,a[10][1].y+29);
				b[10][1]=0;
				setfillcolor(BLUE);
				bar(a[c1][d1].x+1,a[c1][d1].y+1,a[c1][d1].x+29,a[c1][d1].y+29);
				b[c1][d1]=0;
				setfillcolor(BLACK);
				bar(a[c2][d2].x+1,a[c2][d2].y+1,a[c2][d2].x+29,a[c2][d2].y+29);
				b[c2][d2]=1;
///////////////////////////////////////////////////////////////////////////////////////////
	m.x1=a[1][1].x;
	m.y1=a[1][1].y;
	setfillcolor(RED);
	bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
	setfillcolor(GREEN);
	bar(451,451,479,479);
	k2=1;t2=1;
	clock_t start = clock();//记录开始时间
	while(m.y1!=450)
	{
	if(kbhit()!=0)
			{
				key=getch();
				switch(key) 
				{
					case 'w':d=1;break; 
					case 's':d=2;break;
					case 'a':d=3;break;
					case 'd':d=4;break;
					case 'p':getch();
				}
			}	
	switch(d)
	{
		case 1:	setfillcolor(BLACK);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				m.y1-=30;
				t2-=1;
				if(b[t2][k2]!=0&&b[t2][k2]!=9)
				{
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				}
				else
				{
				t2+=1;
				m.y1+=30;
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				}
				break;
		case 2:	setfillcolor(BLACK);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				m.y1+=30;
				t2+=1;
				if(b[t2][k2]!=0&&b[t2][k2]!=9)
				{
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				}
				else
				{
				t2-=1;
				m.y1-=30;
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				}
				break;
		case 3:	setfillcolor(BLACK);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				m.x1-=30;
				k2-=1;
				if(b[t2][k2]!=0&&b[t2][k2]!=9)
				{
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				}
				else
				{
				m.x1+=30;
				k2+=1;
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				}
				break;
		case 4:	setfillcolor(BLACK);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				m.x1+=30;
				k2+=1;
				if(b[t2][k2]!=0&&b[t2][k2]!=9)
				{
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				}
				else
				{
				k2-=1;
				m.x1-=30;
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				}
				break;
	}
	d=5; 
	}
	 char p1[50];
	 clock_t finish = clock();   //结束时间
	 double duration = (double)(finish - start) / CLOCKS_PER_SEC; 
	 outtextxy(780,100,"游戏所花时间为：");
	 itoa(duration,p1,10);
	 outtextxy(900,100,p1);
	 outtextxy(925,100,"s");
	 outtextxy(780,50,"恭喜闯关成功!!!");
	 getch();
	 cleardevice();
}
void tuichu()/////////////////////////////////////////////////////////退出程序 
{
	char str[100];
	for(int i=3;i>=1;i--)
	{	itoa(i,str,10);
		outtextxy(448, 220,str);
		outtextxy(458, 220,"秒后退出游戏");
		Sleep(1000);
	}
}
void loading()/////////////////////////////////////////////////////////////加载
{	char str1[100];
	outtextxy(408, 280,"正在加载请稍后...");
	for(int i=0;i<=100;i++)
	{
		itoa(i,str1,10);
		outtextxy(610,280,str1);
		outtextxy(640,280,"%");
		Sleep(10);
	}
	cleardevice();
}
int InitStack(SqStack &S)
{
	S.base=(int *)malloc(STACK_INIT_SIZE*sizeof(int));
	if(!S.base)exit(OVERFLOW);
	S.top=S.base;
	S.stacksize=STACK_INIT_SIZE;
	return OK;
}
int Push(SqStack &S,int e)///////////////////////////插入e为新的栈顶元素 
{
	if(S.top-S.base>=S.stacksize)//////////////////栈满，追加分配空间 
	{ 
		S.base=(int *)realloc(S.base,(S.stacksize+STACKINCREMENT)*sizeof(int));
		if(!S.base)exit(OVERFLOW);
		S.top=S.base+S.stacksize;
		S.stacksize+=STACKINCREMENT;
	}
	*S.top++=e;
	return OK;
}
int Pop(SqStack &S,int &e)////////////////////////////////////删除S的栈顶元素，并用e返回其值  
{
	if(S.top==S.base)return ERROR;
	e=*--S.top;
	return OK;
}
int StackEmpty(SqStack &S)///////////////////////////////////若为空返回TRUE,否则返回FALSE 
{
	if(S.top==S.base)
	return TRUE;
	else 
	return FALSE;
}
void Q(int f)
{	SqStack S;
	int t1,t,k,k1,key,d,j,i,t2,k2;
	move m;
	square a[50][50];
	initgraph(1024,640);
	setcolor(LIGHTCYAN);
	line(751,0,751,640);
	line(750,0,750,640);
	line(749,0,749,640);
	int b[50][50];////////////////////////////////////////////判断墙和路的值（1或0）
	int c[50][50];
	for(i=60;i<=510;i+=30)
		line(60,i,510,i);
	for(j=60;j<=510;j+=30)
		line(j,60,j,510); 
	for(t=0,k=60;t<=14,k<=510;t++,k+=30)/////////////////将每一个方块的左上角横纵坐标值赋值给数组 
	{
		for(t1=0,k1=60;t1<=14,k1<=510;t1++,k1+=30)
		{
			    a[t][t1].x=k1;
			    a[t][t1].y=k;
		}
	}
			for(t=0;t<=14;t++)//////////////////////////////////////////////////////////设置墙四周
			{
				for(t1=0;t1<=14;t1++)
				{
						setfillcolor(BLUE); 
						bar(a[0][t1].x+1,a[0][t1].y+1,a[0][t1].x+29,a[0][t1].y+29);
						bar(a[t][0].x+1,a[t][0].y+1,a[t][0].x+29,a[t][0].y+29);
						bar(a[14][t1].x+1,a[14][t1].y+1,a[14][t1].x+29,a[14][t1].y+29);
						bar(a[t][14].x+1,a[t][14].y+1,a[t][14].x+29,a[t][14].y+29);
				}
			}
			for( t2=0;t2<=14;t2++)
			{
				for( k2=0;k2<=14;k2++)
				{
				b[t2][k2]=1;
				b[0][k2]=9;
				b[14][k2]=9;
				b[t2][0]=9;
				b[t2][14]=9;
				b[13][13]=2;
				c[t2][k2]=0;
				a[t2][k2].visit=false;
				}
			}
			for(t1=7;t1<=10;t1+=3)////////////////////////////////////////////////////设置墙
			{
				for(t=1;t<=3;t++)
				{
					setfillcolor(BLUE); 
					bar(a[t][t1].x+1,a[t][t1].y+1,a[t][t1].x+29,a[t][t1].y+29);

				}
			}
			for(t1=7;t1<=10;t1+=3)
			{
				for(t=1;t<=3;t++)
				{
					b[t][t1]=0;
				}
			}
				for(t=7;t<=10;t+=3)
			{
				for(t1=2;t1<=5;t1++)
				{
					setfillcolor(BLUE); 
					bar(a[t][t1].x+1,a[t][t1].y+1,a[t][t1].x+29,a[t][t1].y+29);
					b[t][t1]=0;
				}
			}
			for(t1=5;t1<=6;t1++)
			{
			setfillcolor(BLUE);
			bar(a[t1][2].x+1,a[t1][2].y+1,a[t1][2].x+29,a[t1][2].y+29);
			b[t1][2]=0;
			}
			setfillcolor(BLUE);
			bar(a[9][5].x+1,a[9][5].y+1,a[9][5].x+29,a[9][5].y+29);
			b[9][5]=0;
			for(t=12;t<=13;t++)
			{
				for(t1=1;t1<=2;t1++)
				{
				setfillcolor(BLUE); 
				bar(a[t][t1].x+1,a[t][t1].y+1,a[t][t1].x+29,a[t][t1].y+29);
				b[t][t1]=0;
				}
			}
			setfillcolor(BLUE); 
			bar(a[4][12].x+1,a[4][12].y+1,a[4][12].x+29,a[4][12].y+29);
			b[4][12]=0;
			for(t1=8;t1<=12;t1++)
			{
				setfillcolor(BLUE); 
				bar(a[5][t1].x+1,a[5][t1].y+1,a[5][t1].x+29,a[5][t1].y+29);
				b[5][t1]=0;
			}
			setfillcolor(BLUE); 
			bar(a[7][7].x+1,a[7][7].y+1,a[7][7].x+29,a[7][7].y+29);
			b[7][7]=0;
			for(t1=7;t1<=8;t1++)
			{
				setfillcolor(BLUE); 
				bar(a[8][t1].x+1,a[8][t1].y+1,a[8][t1].x+29,a[8][t1].y+29);
				b[8][t1]=0;
			}
			for(t1=6;t1<=10;t1++)
			{
				setfillcolor(BLUE); 
				bar(a[11][t1].x+1,a[11][t1].y+1,a[11][t1].x+29,a[11][t1].y+29);
				b[11][t1]=0;
			}
			for(t1=10;t1<=11;t1++)
			{
				setfillcolor(BLUE); 
				bar(a[12][t1].x+1,a[12][t1].y+1,a[12][t1].x+29,a[12][t1].y+29);
				b[12][t1]=0;
			}
				setfillcolor(BLUE); 
				bar(a[13][t1].x+1,a[13][t1].y+1,a[13][t1].x+29,a[13][t1].y+29);
				b[13][t1]=0;
			for(t=6;t<=9;t++)
			{
				setfillcolor(BLUE); 
				bar(a[t][11].x+1,a[t][11].y+1,a[t][11].x+29,a[t][11].y+29);
				b[t][11]=0;
			}
			for(t=9;t<=10;t++)
			{
				setfillcolor(BLUE); 
				bar(a[t][12].x+1,a[t][12].y+1,a[t][12].x+29,a[t][12].y+29);
				b[t][12]=0;
			}
			for(t=4;t<=5;t++)
			{
				setfillcolor(BLUE); 
				bar(a[t][5].x+1,a[t][5].y+1,a[t][5].x+29,a[t][5].y+29);
				b[t][5]=0;
				bar(a[t][3].x+1,a[t][3].y+1,a[t][3].x+29,a[t][3].y+29);
				b[t][3]=0;
			}
				for(t=2;t<=5;t++)
			{
				setfillcolor(BLUE);
				bar(a[t][3].x+1,a[t][3].y+1,a[t][3].x+29,a[t][3].y+29);
				b[t][3]=0;
			}
			for(t=11;t<=12;t++)
			{
				setfillcolor(BLUE); 
				bar(a[t][5].x+1,a[t][5].y+1,a[t][5].x+29,a[t][5].y+29);
				b[t][5]=0;
			}
			for(t1=12;t1<=13;t1++)
			{
				setfillcolor(BLUE); 
				bar(a[2][t1].x+1,a[2][t1].y+1,a[2][t1].x+29,a[2][t1].y+29);
				b[2][t1]=0;
			}
			for(t1=1;t1<=2;t1++)
			{
				setfillcolor(BLUE); 
				bar(a[2][t1].x+1,a[2][t1].y+1,a[2][t1].x+29,a[2][t1].y+29);
				b[2][t1]=0;
			}
				setfillcolor(BLUE); 
				bar(a[8][5].x+1,a[8][5].y+1,a[8][5].x+29,a[8][5].y+29);
				b[8][5]=0;
				setfillcolor(BLUE); 
				bar(a[13][11].x+1,a[13][11].y+1,a[13][11].x+29,a[13][11].y+29);
				b[13][11]=0;
				setfillcolor(BLUE); 
				bar(a[10][1].x+1,a[10][1].y+1,a[10][1].x+29,a[10][1].y+29);
				b[10][1]=0;
///////////////////////////////////////////////////////////////////////////////////////////
	m.x1=a[1][1].x;
	m.y1=a[1][1].y;
	setfillcolor(GREEN);
	bar(451,451,479,479);
	setfillcolor(RED);
	bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
	k2=1;t2=1;
	char f1[50],f2[50];
	if(f==1)
	{	outtextxy(800,40,"可通关路径左上角坐标为：");
		int L=60;
		k2=1;t2=1;
		InitStack(S);
		while(a[t2][k2].y!=480)
			{
			if(b[t2][k2+1]!=0&&a[t2][k2+1].visit==false)
				{
				++k2;
				Push(S,b[t2][k2]);
				a[t2][k2].visit=true;
				}
			else if(b[t2+1][k2]!=0&&a[t2+1][k2].visit==false)
				{	
				++t2;
				Push(S,b[t2][k2]);
				a[t2][k2].visit=true;
				}
			else if(b[t2][k2-1]!=0&&a[t2][k2-1].visit==false)
				{
					--k2;
					Push(S,b[t2][k2]);
					a[t2][k2].visit=true;
				}
			else if(b[t2-1][k2]!=0&&a[t2-1][k2].visit==false)
				{
				--t2;
				Push(S,b[t2][k2]);
				a[t2][k2].visit=true;
				}
			while(!StackEmpty(S))
				{
					Pop(S,b[t2][k2]);
					outtextxy(800,L,"<");
					itoa(a[t2][k2].x,f1,10);
					outtextxy(810,L,f1);
					outtextxy(835,L,",");
					itoa(a[t2][k2].y,f2,10);
					outtextxy(845,L,f2);
					outtextxy(870,L,">");
					L+=20;
				}
			}
	}
	t2=1;k2=1;
	clock_t start = clock();//记录开始时间
	while(b[t2][k2]!=2)
	{	setfillcolor(GREEN);
	bar(451,451,479,479);
	if(kbhit()!=0)
			{
				key=getch();
				switch(key) 
				{
					case 'w':d=1;break; 
					case 's':d=2;break;
					case 'a':d=3;break;
					case 'd':d=4;break;
					case 'p':getch();
				}
			}	
	switch(d)
	{
		case 1:	setfillcolor(BLACK);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				m.y1-=30;
				t2-=1;
				if(b[t2][k2]!=0&&b[t2][k2]!=9)
				{
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				c[t2][k2]=1;
				}
				else
				{
				t2+=1;
				m.y1+=30;
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				}
				break;
		case 2:	setfillcolor(BLACK);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				m.y1+=30;
				t2+=1;
				if(b[t2][k2]!=0&&b[t2][k2]!=9)
				{
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				c[t2][k2]=1;
				}
				else
				{
				t2-=1;
				m.y1-=30;
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				}
				break;
		case 3:	setfillcolor(BLACK);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				m.x1-=30;
				k2-=1;
				if(b[t2][k2]!=0&&b[t2][k2]!=9)
				{
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				c[t2][k2]=1;
				}
				else
				{
				m.x1+=30;
				k2+=1;
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				}
				break;
		case 4:	setfillcolor(BLACK);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				m.x1+=30;
				k2+=1;
				if(b[t2][k2]!=0&&b[t2][k2]!=9)
				{
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				c[t2][k2]=1;
				}
				else
				{
				k2-=1;
				m.x1-=30;
				setfillcolor(RED);
				bar(m.x1+2,m.y1+2,m.x1+26,m.y1+26);
				}
				break;
	}
	d=5; 
	}char p1[50];
	clock_t finish = clock();   //结束时间
	 double duration = (double)(finish - start) / CLOCKS_PER_SEC; 
	 outtextxy(780,100,"游戏所花时间为：");
	 itoa(duration,p1,10);
	 outtextxy(900,100,p1);
	 outtextxy(925,100,"s");
	 outtextxy(780,50,"恭喜闯关成功!!!");
	 getch();
	 cleardevice();
}
void menu()
{	int n,n1=1,f1;
	SqStack S;
	initgraph(1024,640);
	setcolor(LIGHTCYAN);
	int i1,j1,x1;
	while(n1){
	settextstyle(25,0,_T("华文琥珀"));
	outtextxy(380,150,"***********************");
	outtextxy(418,170,"欢迎使用迷宫系统");
	outtextxy(380,200,"***********************");
	char a[10000]="Designer		L Y S ";
	i1=0;x1=390;
	while(a[i1]!='\0')
    {
        outtextxy(x1,380,a[i1]);
        i1++;
       Sleep(60);
	   x1+=15;
    }
	outtextxy(448, 250, "1 进入游戏");
	outtextxy(448, 280, "2 退出游戏");
	outtextxy(448, 310, "3 编辑迷宫");
	outtextxy(448, 340, "4 生成路径");
	scanf("%d",&n);
	switch(n)
 	{
 		case 1:
 			{ 
			 cleardevice();
			 loading();
			 Q(f1);}break;
 		case 2:
 			{ n1=0;
			  cleardevice();
			  tuichu();
			  system("color 9e");
			}break;
		case 3:
			{
			cleardevice();
			edit();
			}break;
		case 4:
			{
			cleardevice();
			Q(1);
			}
	}
			}
}
int main()
{  	
	mciSendString("open D:\\background.mp3 alias bkmusic",NULL,0,NULL);
	mciSendString("play bkmusic repeat",NULL,0,NULL);
	menu();
	return 0; 
}

